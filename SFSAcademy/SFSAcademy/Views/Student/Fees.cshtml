@model SFSAcademy.STUDENT


@{
    IEnumerable<SFSAcademy.StundentFee> dates = (IEnumerable<SFSAcademy.StundentFee>)ViewData["dates"];
    IList<SFSAcademy.SelectCourseBatch> batch = (IList<SFSAcademy.SelectCourseBatch>)ViewData["batch"];
    IList<SFSAcademy.SelectCourseBatch> batches = (IList<SFSAcademy.SelectCourseBatch>)ViewData["batches"];
    IEnumerable<SFSAcademy.FeeParticular> fee_particulars = (IEnumerable<SFSAcademy.FeeParticular>)ViewData["fee_particulars"];
    IEnumerable<SFSAcademy.FeeTransaction> paid_fees = (IEnumerable<SFSAcademy.FeeTransaction>)ViewData["paid_fees"];
    IEnumerable<FEE_DISCOUNT> batch_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["batch_discounts"];
    IEnumerable<FEE_DISCOUNT> student_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["student_discounts"];
    IEnumerable<FEE_DISCOUNT> category_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["category_discounts"];
    IEnumerable<FEE_FINE> batch_fine = (IEnumerable<FEE_FINE>)ViewData["batch_fine"];
    IEnumerable<FEE_FINE> student_fine = (IEnumerable<FEE_FINE>)ViewData["student_fine"];
    IEnumerable<FEE_FINE> category_fine = (IEnumerable<FEE_FINE>)ViewData["category_fine"];
}
@{
    ViewBag.Title = "Fees";
}

<div id="content-header">
    <img src="~/Content/images/student_details/student_details_logo.jpg" alt="Student Details Logo">
    <h1>Student</h1>
    <h3>Fee Status</h3>
    <div id="app-back-button">
        <a href='javascript:history.back()' onclick="return confirm('are you sure?')"><img src="~/Content/images/buttons/back.png"></a>
    </div>
</div>
<div><img src="~/Content/images/_global/header_underline_.jpg" style="width:100%"></div>
<div id="inner-tab-menu">
    <ul>
        <li>@Html.ActionLink("Student Profile", "Profiles", new { id= Model.ID})</li>
    </ul>
</div>
<div id="page-yield">
    <div id="flash_box">
        @if (ViewBag.ErrorMessage != null)
            {
            <p class="flash-msg"> @ViewBag.ErrorMessage </p>
        }
    </div>
    <div id="student_profile_heading">

        <div id="student_main_info">
            <span class="name"> @Model.FIRST_NAME @Model.MID_NAME @Model.LAST_NAME  </span>
            <span class="course">Course and Batch: @batch.FirstOrDefault().CourseData.CODE - @batch.FirstOrDefault().BatchData.NAME </span>
            <span class="adm"> Adm. No.: @Model.ADMSN_NO </span>
        </div>
        <div class="extender"> </div>
    </div>
    <div class="fees">
        @if (Html.Permitted_To("Fees", "Finance") || Html.CurrentUser_UserType().Equals("Admin"))
        {
           using (Html.BeginForm())
           {
            @Html.AntiForgeryToken()
            @Html.CheckBoxFor(x => x.HAS_PD_FE, new { @class = "category_select", @id = "category_select" }) <label>Has paid all the Fees </label>
            <input type="submit" value="► Update" id="user_button" class="user_button" />
           }
        }
    </div>
    <ul id="category-list">
        @if (dates != null && dates.Count() != 0)
        {
        <li class="listheading">
            <div class="category-name">Fees </div>
            <div class="due-date">Last Batch/ Due Date </div>
            <div class="category-edit">Payment Status</div>
        </li>
        }
        @{ int i = 0;}
        @foreach (var item in dates)
        {
            var fee_particulars_inner = fee_particulars.Where(x => x.FeeCollectionData.ID == item.FeeCollectionData.ID);
            decimal total_fees = 0;
            foreach (var item2 in fee_particulars_inner)
            {
                total_fees += (decimal)item2.FeeParticularData.AMT;
            }

            decimal total_discount_val = 0;
            var batch_discounts_inner = batch_discounts.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == item.FeeCollectionData.BTCH_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.DISC_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (batch_discounts_inner != null && batch_discounts_inner.Count() != 0)
            {
                foreach (var item2 in batch_discounts_inner)
                {
                    total_discount_val += item2.IS_AMT == true ? (decimal)item2.DISC : total_fees * (decimal)item2.DISC / 100;
                }
            }
            var student_discounts_inner = student_discounts.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.DISC_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (student_discounts_inner != null && student_discounts_inner.Count() != 0)
            {
                foreach (var item3 in student_discounts_inner)
                {
                    total_discount_val += item3.IS_AMT == true ? (decimal)item3.DISC : total_fees * (decimal)item3.DISC / 100;
                }
            }
            var category_discounts_inner = category_discounts.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.DISC_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (category_discounts_inner != null && category_discounts_inner.Count() != 0)
            {
                foreach (var item4 in category_discounts_inner)
                {
                    total_discount_val += item4.IS_AMT == true ? (decimal)item4.DISC : total_fees * (decimal)item4.DISC / 100;
                }
            }
            if (total_discount_val > total_fees && total_fees >= 0)
            {
                total_discount_val = total_fees;
            }

            decimal total_fine_val = 0;
            var batch_fine_inner = batch_fine.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == item.FeeCollectionData.BTCH_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.FINE_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (batch_fine_inner != null && batch_fine_inner.Count() != 0)
            {
                foreach (var item5 in batch_fine_inner)
                {
                    total_fine_val += item5.IS_AMT == true ? (decimal)item5.FINE : total_fees * (decimal)item5.FINE / 100;
                }

            }
            var student_fine_inner = student_fine.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.FINE_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (student_fine_inner != null && student_fine_inner.Count() != 0)
            {
                foreach (var item6 in student_fine_inner)
                {
                    total_fine_val += item6.IS_AMT == true ? (decimal)item6.FINE : total_fees * (decimal)item6.FINE / 100;
                }
            }
            var category_fine_inner = category_fine.Where(x => x.FIN_FEE_CAT_ID == item.FeeCollectionData.FEE_CAT_ID && (x.FEE_CLCT_ID == item.FeeCollectionData.ID || (x.FEE_CLCT_ID == null && x.FINE_DATE <= item.FeeCollectionData.DUE_DATE)));
            if (category_fine_inner != null && category_fine_inner.Count() != 0)
            {
                foreach (var item6 in category_fine_inner)
                {
                    total_fine_val += item6.IS_AMT == true ? (decimal)item6.FINE : total_fees * (decimal)item6.FINE / 100;
                }
            }

            if (total_discount_val != 0)
            {
                total_fees -= total_discount_val;
            }
            if (total_fine_val != 0)
            {
                total_fees += total_fine_val;
            }

            var paid_fees_inner = paid_fees.Where(x => (x.StudentData.ID == item.StudentData.ID) && (x.FeeCollectionData.ID == item.FeeCollectionData.ID));
            if (paid_fees_inner != null)
            {
                decimal paid = 0;
                foreach (var item13 in paid_fees_inner)
                {
                    paid += (decimal)item13.FinanceTransactionData.AMT;
                }
                total_fees -= paid;
            }

            string selectedRow = "listeven";
            if (i % 2 == 0)
            {
                selectedRow = "listodd";
            }
            var BatchInner = batches.Where(x => x.BatchData.ID == item.FeeCollectionData.BTCH_ID);

        <li class="@selectedRow">
            <div class="category-name">@Html.ActionLink(item.FeeCollectionData.NAME, "Fee_Details", new { id = Model.ID, id2 = item.FeeCollectionData.ID })</div>
            <div class="due-date">@BatchInner.FirstOrDefault().CourseData.CODE / @item.FeeCollectionData.DUE_DATE.Value.ToShortDateString()</div>
            @if (item.FinanceFeeData.IS_PD == true)
            {
                <div class="category-edit">PAID</div>
            }
            else
            {
                <div class="category-edit">UNPAID - @total_fees</div>
            }
        </li>
            i = i + 1;
        }
    </ul>
</div>


