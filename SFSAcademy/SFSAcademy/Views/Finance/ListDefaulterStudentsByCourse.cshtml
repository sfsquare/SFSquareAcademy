@model PagedList.IPagedList<SFSAcademy.Models.Student>
@using PagedList.Mvc;
@using SFSAcademy.Models
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{ Layout = null;}

@{
    IEnumerable<SFSAcademy.Models.StundentFee> defaulters = (IEnumerable<SFSAcademy.Models.StundentFee>)ViewData["defaulters"];
    IEnumerable<SFSAcademy.Models.FeeParticular> fee_particulars = (IEnumerable<SFSAcademy.Models.FeeParticular>)ViewData["fee_particulars"];
    IEnumerable<SFSAcademy.Models.FeeTransaction> paid_fees = (IEnumerable<SFSAcademy.Models.FeeTransaction>)ViewData["paid_fees"];
    IEnumerable<FEE_DISCOUNT> batch_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["batch_discounts"];
    IEnumerable<FEE_DISCOUNT> student_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["student_discounts"];
    IEnumerable<FEE_DISCOUNT> category_discounts = (IEnumerable<FEE_DISCOUNT>)ViewData["category_discounts"];
    IEnumerable<FEE_FINE> batch_fine = (IEnumerable<FEE_FINE>)ViewData["batch_fine"];
    IEnumerable<FEE_FINE> student_fine = (IEnumerable<FEE_FINE>)ViewData["student_fine"];
    IEnumerable<FEE_FINE> category_fine = (IEnumerable<FEE_FINE>)ViewData["category_fine"];
    IEnumerable<SFSAcademy.Models.StudentsGuardians> guardians = (IEnumerable<SFSAcademy.Models.StudentsGuardians>)ViewData["guardians"];
}

@if (defaulters != null && defaulters.Count() != 0)
{
<table align="center" style="width:100%;" cellpadding="1" cellspacing="1" id="listing">
    <tr class="tr-head">
        <th>
            Sl. No.
        </th>
        <th>
            @Html.ActionLink("Name", "Aggregated_Fees_Due", new { page = ViewBag.CurrentPage, sortOrder = ViewBag.NameSortParm, searchString = ViewBag.CurrentFilter })
        </th>
        <th>
            Batch
        </th>
        <th>
            Roll No.
        </th>
        <th>
            Admission No.
        </th>
        <th>
            @Html.ActionLink("Admission Date", "Aggregated_Fees_Due", new { page = ViewBag.CurrentPage, sortOrder = ViewBag.DateSortParm, searchString = ViewBag.CurrentFilter })
        </th>
        <th>
            Father Name
        </th>
        <th>
            Phone Number
        </th>
        <th>
            Due Amount
        </th>
        <th></th>
    </tr>
    <tr class="tr-blank"></tr>
    @{int i = 1; }
    @foreach (var item in Model)
    {
        var defaulters_inner = defaulters.Where(x => x.StudentData.ID == item.StudentData.ID);
        decimal total_fees_aggr = 0;

        foreach (var DefaulterItem in defaulters_inner)
        {
            var fee_particulars_inner = fee_particulars.Where(x => (x.FeeCollectionData.ID == DefaulterItem.FeeCollectionData.ID) && (x.FeeParticularData.STDNT_ID == DefaulterItem.StudentData.ID || x.FeeParticularData.STDNT_ID == null) && (x.FeeParticularData.STDNT_CAT_ID == DefaulterItem.StudentData.STDNT_CAT_ID || x.FeeParticularData.STDNT_CAT_ID == null));
            decimal total_fees = 0;
            DateTime StartDate = DefaulterItem.FeeCollectionData.START_DATE ?? System.DateTime.Now;
            DateTime EndDate = DefaulterItem.FeeCollectionData.END_DATE ?? System.DateTime.Now;
            //TimeSpan duration = DefaulterItem.FeeCollectionData.END_DATE != null && DefaulterItem.FeeCollectionData.START_DATE != null ? (TimeSpan)(DefaulterItem.FeeCollectionData.END_DATE - DefaulterItem.FeeCollectionData.START_DATE) : TimeSpan.Zero;
            int Collectiondays = DefaulterItem.FeeCollectionData.END_DATE != null && DefaulterItem.FeeCollectionData.START_DATE != null ? Html.GetMonthsBetween(StartDate, EndDate.AddDays(1)) : 0;

            //TimeSpan Currduration = ViewBag.firstDayCurMonth != null && DefaulterItem.FeeCollectionData.START_DATE != null ? (TimeSpan)(ViewBag.firstDayCurMonth - DefaulterItem.FeeCollectionData.START_DATE) : TimeSpan.Zero;
            int CurrCollectiondays = DefaulterItem.FeeCollectionData.START_DATE != null ? Html.GetMonthsBetween(StartDate, System.DateTime.Now) : 0;
            foreach (var item2 in fee_particulars_inner)
            {
                if (item2.FeeCategoryData.FEE_FREQ == "Monthly" && System.DateTime.Now >= DefaulterItem.FeeCollectionData.START_DATE && System.DateTime.Now <= DefaulterItem.FeeCollectionData.END_DATE)
                {
                    total_fees += (decimal)item2.FeeParticularData.AMT * (decimal)CurrCollectiondays / (decimal)Collectiondays;
                }
                else
                {
                    total_fees += (decimal)item2.FeeParticularData.AMT;
                }
            }
            decimal total_discount_val = 0;
            var batch_discounts_inner = batch_discounts.Where(x => (x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID) && (x.RCVR_ID == DefaulterItem.StudentData.BTCH_ID) && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (batch_discounts_inner != null && batch_discounts_inner.Count() != 0)
            {
                foreach (var item2 in batch_discounts_inner)
                {
                    if (item2.FINANCE_FEE_CATGEORY.FEE_FREQ == "Monthly" && item2.FEE_CLCT_ID == null && System.DateTime.Now >= DefaulterItem.FeeCollectionData.START_DATE && System.DateTime.Now <= DefaulterItem.FeeCollectionData.END_DATE)
                    {
                        total_discount_val += item2.IS_AMT == true ? (decimal)item2.DISC * (decimal)CurrCollectiondays / (decimal)Collectiondays : total_fees * (decimal)item2.DISC * (decimal)CurrCollectiondays / (decimal)Collectiondays / 100;
                    }
                    else
                    {
                        total_discount_val += item2.IS_AMT == true ? (decimal)item2.DISC : total_fees * (decimal)item2.DISC / 100;
                    }
                }
            }
            var student_discounts_inner = student_discounts.Where(x => x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == DefaulterItem.StudentData.ID && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (student_discounts_inner != null && student_discounts_inner.Count() != 0)
            {
                foreach (var item3 in student_discounts_inner)
                {
                    total_discount_val += item3.IS_AMT == true ? (decimal)item3.DISC : total_fees * (decimal)item3.DISC / 100;

                }
            }
            var category_discounts_inner = category_discounts.Where(x => x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == DefaulterItem.StudentData.STDNT_CAT_ID && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (category_discounts_inner != null && category_discounts_inner.Count() != 0)
            {
                foreach (var item4 in category_discounts_inner)
                {
                    if (item4.FINANCE_FEE_CATGEORY.FEE_FREQ == "Monthly" && item4.FEE_CLCT_ID == null && System.DateTime.Now >= DefaulterItem.FeeCollectionData.START_DATE && System.DateTime.Now <= DefaulterItem.FeeCollectionData.END_DATE)
                    {
                        total_discount_val += item4.IS_AMT == true ? (decimal)item4.DISC * (decimal)CurrCollectiondays / (decimal)Collectiondays : total_fees * (decimal)item4.DISC * (decimal)CurrCollectiondays / (decimal)Collectiondays / 100;
                    }
                    else
                    {
                        total_discount_val += item4.IS_AMT == true ? (decimal)item4.DISC : total_fees * (decimal)item4.DISC / 100;
                    }
                }
            }
            if (total_discount_val > total_fees && total_fees >= 0)
            {
                total_discount_val = total_fees;
            }

            decimal total_fine_val = 0;
            var batch_fine_inner = batch_fine.Where(x => x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == DefaulterItem.StudentData.BTCH_ID && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (batch_fine_inner != null && batch_fine_inner.Count() != 0)
            {
                foreach (var item5 in batch_fine_inner)
                {
                    total_fine_val += item5.IS_AMT == true ? (decimal)item5.FINE : total_fees * (decimal)item5.FINE / 100;
                }

            }
            var student_fine_inner = student_fine.Where(x => x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == DefaulterItem.StudentData.ID && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (student_fine_inner != null && student_fine_inner.Count() != 0)
            {
                foreach (var item6 in student_fine_inner)
                {
                    total_fine_val += item6.IS_AMT == true ? (decimal)item6.FINE : total_fees * (decimal)item6.FINE / 100;
                }
            }
            var category_fine_inner = category_fine.Where(x => x.FIN_FEE_CAT_ID == DefaulterItem.FeeCollectionData.FEE_CAT_ID && x.RCVR_ID == DefaulterItem.StudentData.STDNT_CAT_ID && (x.FEE_CLCT_ID == DefaulterItem.FeeCollectionData.ID || x.FEE_CLCT_ID == null));
            if (category_fine_inner != null && category_fine_inner.Count() != 0)
            {
                foreach (var item6 in category_fine_inner)
                {
                    total_fine_val += item6.IS_AMT == true ? (decimal)item6.FINE : total_fees * (decimal)item6.FINE / 100;
                }
            }

            if (total_discount_val != 0)
            {
                total_fees -= total_discount_val;
            }
            if (total_fine_val != 0)
            {
                total_fees += total_fine_val;
            }

            var paid_fees_inner = paid_fees.Where(x => x.StudentData.ID == DefaulterItem.StudentData.ID && x.FinanceFeeData.ID == DefaulterItem.FinanceFeeData.ID);
            if (paid_fees_inner != null)
            {
                decimal paid = 0;
                foreach (var item13 in paid_fees_inner)
                {
                    paid += (decimal)item13.FinanceTransactionData.AMT;
                }
                total_fees -= paid;
            }
            total_fees_aggr += total_fees;
        }


        string selectedRow = "tr-even";
        if (i % 2 == 0)
        {
            selectedRow = "tr-odd";
        }
        var SelGuardian = guardians.Where(x => x.StudentData.ID == item.StudentData.ID);
        string Phone_Number = "";
        string GuardianName = "";
    <tr class="@selectedRow">
        <td class="col-1">@i</td>
        <td class="col-2">@item.StudentData.FIRST_NAME @item.StudentData.MID_NAME @item.StudentData.LAST_NAME</td>
        <td class="col-3">@item.CourseData.CODE - @item.BatcheData.NAME</td>
        <td class="col-3">@item.StudentData.CLS_ROLL_NO</td>
        <td class="col-5">@item.StudentData.ADMSN_NO</td>
        <td class="col-6">@item.StudentData.ADMSN_DATE.Value.ToShortDateString()</td>
        @foreach (var item2 in SelGuardian)
        {
            Phone_Number = item2.GuardianData.MOBL_PH != null ? string.Concat(Phone_Number, item2.GuardianData.MOBL_PH.ToString(), ",") : Phone_Number;
            GuardianName = string.Concat(GuardianName, item2.GuardianData.FIRST_NAME, " ", item2.GuardianData.LAST_NAME, ",");
        }
        @if (SelGuardian != null)
        {
            <td class="col-7">@GuardianName</td>
            <td class="col-8"> @Phone_Number </td>
        }
        else
        {
            <td class="col-7"></td>
            <td class="col-8"></td>
        }
        <td class="col-9">@total_fees_aggr</td>
        <td class="col-10">@Html.ActionLink("►Pay Fees", "Fees_Student_Search")</td>
    </tr>
        i = i + 1;
    }
</table>
    <br />
    @Html.PagedListPager(Model, page => Url.Action("Aggregated_Fees_Due",
    new { page, sortOrder = ViewBag.CurrentSort, searchString = ViewBag.CurrentFilter }))
    @Html.ActionLink("► pdf Report", "Aggregated_Fees_Due_pdf", new { page = ViewBag.CurrentPage, sortOrder = ViewBag.CurrentSort, batch_id = @ViewBag.CurrentFilter}, new { @class = "user_button", @target = "_blank" })
}
else
{
    <p class="flash-msg">No Defaulters</p>
}
<input type="hidden" value="@ViewBag.CurrentFilter" id="batch_id" name="batch_id" />


