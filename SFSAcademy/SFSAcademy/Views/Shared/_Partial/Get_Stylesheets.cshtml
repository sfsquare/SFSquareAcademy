
@{
    string CSSDirection = "~/Content/stylesheets/";
    string JSDirection = "~/Content/javascripts/tiny_mce/plugins/";
    bool CSSAll = true;
}

@if (CSSAll)
{
    DynamicHeader.AddStyleSheet(CSSDirection + "_layouts/style.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "_layouts/pdf.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "_styles/ui.all.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "modalbox.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "calendar.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "autosuggest-menu.css");
}


@if (LocationHelper.IsCurrentControllerAndAction("USERs", "Dashboard", ViewContext))
{
    DynamicHeader.AddStyleSheet(CSSDirection + "_layouts/dashboard.css");

}
else if (LocationHelper.IsCurrentControllerAndAction("USERs", "Login", ViewContext) || LocationHelper.IsCurrentControllerAndAction("USERs", "Set_New_Password", ViewContext))
{
    DynamicHeader.AddStyleSheet(CSSDirection + "_layouts/login.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "_layouts/forgotpw.css");
}
else
{
    DynamicHeader.AddStyleSheet(CSSDirection + "application.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "popup.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "redbox.css");
    DynamicHeader.AddStyleSheet(CSSDirection + "error_page.css");
}

@{
    string ApplicationPhysicalPath = HostingEnvironment.ApplicationPhysicalPath;
    DirectoryInfo Directory = new DirectoryInfo(ApplicationPhysicalPath + "Content/stylesheets/" + @ViewContext.RouteData.Values["controller"]);
    if (Directory.Exists)
    {
        FileInfo[] files = Directory.GetFiles();
        files = files.OrderBy(f => f.Name).ToArray();
        IEnumerable<FileInfo> filesList = files.OrderBy(f => f.Name).ToArray();
        bool ExitLoop = false;
        for (var itemNumber = 0; itemNumber <= filesList.Count() - 1; itemNumber++)
        {
            if (ExitLoop) { break; }
            if (String.Equals(filesList.ElementAt(itemNumber).ToString().Substring(0, filesList.ElementAt(itemNumber).ToString().IndexOf('.')).ToUpper(), @ViewContext.RouteData.Values["action"].ToString().ToUpper()))
            {
                DynamicHeader.AddStyleSheet(CSSDirection + @ViewContext.RouteData.Values["controller"] + "/" + filesList.ElementAt(itemNumber));
                ExitLoop = true;
                break;
            }

        }
    }

}

@{
    DirectoryInfo Directory2 = new DirectoryInfo(ApplicationPhysicalPath + "Content/javascripts/tiny_mce/plugins/" + @ViewContext.RouteData.Values["controller"] + "/css");
    if (Directory2.Exists)
    {
        FileInfo[] files = Directory2.GetFiles();
        files = files.OrderBy(f => f.Name).ToArray();
        IEnumerable<FileInfo> filesList = files.OrderBy(f => f.Name).ToArray();
        bool ExitLoop = false;
        for (var itemNumber = 0; itemNumber <= filesList.Count() - 1; itemNumber++)
        {
            if (ExitLoop) { break; }
            if (String.Equals(filesList.ElementAt(itemNumber).ToString().Substring(0, filesList.ElementAt(itemNumber).ToString().IndexOf('.')).ToUpper(), @ViewContext.RouteData.Values["action"].ToString().ToUpper()))
            {
                DynamicHeader.AddStyleSheet(JSDirection + @ViewContext.RouteData.Values["controller"] + "/css" + "/" + filesList.ElementAt(itemNumber));
                ExitLoop = true;
                break;
            }

        }
    }

}
